# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MGBSED
                                 A QGIS plugin
 Mgb sed
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by HGE
        email                : leolaipelt@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QWidget,QTableWidgetItem
from qgis.gui import QgsMapToolEmitPoint
from qgis.core import QgsRasterLayer, QgsRasterBandStats
from qgis.analysis import QgsRasterCalculatorEntry, QgsRasterCalculator
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mgb_sed_dialog import MGBSEDDialog
import os.path
import time 
import shutil
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import datetime
import subprocess

from qgis.core import (
    Qgis, QgsVectorLayer,QgsPointXY, QgsApplication, QgsMessageLog, QgsTask, QgsProject,QgsMapLayerProxyModel,QgsGeometry)
from time import sleep
import os

class MGBSED:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MGBSED_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MGB SED')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MGBSED', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mgb_sed/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MGBSED'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MGB SED'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MGBSEDDialog()
        
        # INTRO
            self.dlg.open_project_folder.clicked.connect(self.f_project_folder)

        # Musle section
            self.dlg.input_musle_hru.setText("")
            self.dlg.open_musle_hru.clicked.connect(self.f_open_hru_file)
            self.dlg.new_line_text.clicked.connect(self.f_add_line_musle_text)
            self.dlg.remove_line.clicked.connect(self.f_remove_line_musle_text)
            self.dlg.exp_partext.clicked.connect(self.f_export_partext)
            self.dlg.load_texture.clicked.connect(self.f_load_partext)

            self.dlg.new_line_text_2.clicked.connect(self.f_add_line_musle_text2)
            self.dlg.remove_line_2.clicked.connect(self.f_remove_line_musle_text2)
            self.dlg.exp_parfactor.clicked.connect(self.f_export_parfactor)
            self.dlg.load_factor.clicked.connect(self.f_load_parfactor)

        # Button function

            self.dlg.input_presed1.setText("")
            self.dlg.input_presed2.setText("")
            self.dlg.input_presed3.setText("")
            self.dlg.input_presed4.setText("")
            self.dlg.input_presed5.setText("")
            self.dlg.input_presed6.setText("")
            self.dlg.input_presed7.setText("")

            self.dlg.run_presed.clicked.connect(self.run_task_presed)
            self.dlg.open_presed1.clicked.connect(self.f_open_presed1)
            self.dlg.open_presed2.clicked.connect(self.f_open_presed2)
            self.dlg.open_presed3.clicked.connect(self.f_open_presed3)
            self.dlg.open_presed4.clicked.connect(self.f_open_presed4)
            self.dlg.open_presed5.clicked.connect(self.f_open_presed5)
            self.dlg.open_presed6.clicked.connect(self.f_open_presed6)
            self.dlg.open_presed7.clicked.connect(self.f_open_presed7)

            #SED Geometry
            self.dlg.input_sed_geom1.setText('')
            #self.dlg.input_sed_geom2.setText('')

            #SED Hydrological
            self.dlg.input_sed_hydro.setText('')
            
            #SED Climatological
            self.dlg.input_sed_cli1.setText('')
            self.dlg.input_sed_cli2.setText('')
            #SED Parameters
            self.dlg.input_sed_par1.setText('')
            self.dlg.input_sed_par2.setText('')
            self.dlg.input_sed_par3.setText('')
            #SED Sediments
            self.dlg.input_sed_sed1.setText('')
            self.dlg.input_sed_sed2.setText('')
            self.dlg.input_sed_sed3.setText('')
            #SED Sediments Musle
            self.dlg.input_sedpar1.setText('')
            self.dlg.input_sedpar2.setText('')

            #Click action
            self.dlg.open_geom1.clicked.connect(self.f_open_geom1)
            #self.dlg.open_geom2.clicked.connect(self.f_open_geom2)

            self.dlg.open_hydro.clicked.connect(self.f_open_hydro) 

            self.dlg.open_cli1.clicked.connect(self.f_open_cli1)
            self.dlg.open_cli2.clicked.connect(self.f_open_cli2)

            self.dlg.open_par1.clicked.connect(self.f_open_par1)
            self.dlg.open_par2.clicked.connect(self.f_open_par2)
            self.dlg.open_par3.clicked.connect(self.f_open_par3)

            self.dlg.open_sed1.clicked.connect(self.f_open_sed1)
            self.dlg.open_sed2.clicked.connect(self.f_open_sed2)
            self.dlg.open_sed3.clicked.connect(self.f_open_sed3)

            self.dlg.open_sedpar1.clicked.connect(self.f_open_sedpar1)
            self.dlg.open_sedpar2.clicked.connect(self.f_open_sedpar2)

            self.dlg.run_sed.clicked.connect(self.run_task_mgb_sed)
            
            #Result step
            self.dlg.mini_bacia_text.setText('')
            self.dlg.con_rio_areia_button.clicked.connect(self.graphic_conc_rio_areia)
            self.dlg.con_rio_silte_button.clicked.connect(self.graphic_conc_rio_silte)
            self.dlg.con_rio_argila_button.clicked.connect(self.graphic_conc_rio_argila)
            self.dlg.sed_areia_button.clicked.connect(self.graphic_sed_areia)
            self.dlg.sed_silte_button.clicked.connect(self.graphic_sed_silte)
            self.dlg.sed_argila_button.clicked.connect(self.graphic_sed_argila)
            self.dlg.vazao_button.clicked.connect(self.graphic_vazao)
            self.dlg.con_rio_finos_button.clicked.connect(self.graphic_conc_finos)

            self.dlg.open_shp_str.clicked.connect(self.f_open_shp_str)
            self.dlg.descarga_total_shp_button.clicked.connect(self.descarga_solida_total)

            #Simulado vs Observado
            self.dlg.input_obs.setText('')
            self.dlg.open_obs.clicked.connect(self.open_obs_data)
            self.dlg.sim_obs_button.clicked.connect(self.sim_obs_graphic)

            self.dlg.input_obs_2.setText('')
            self.dlg.open_obs_2.clicked.connect(self.open_obs_data_vazao)
            self.dlg.sim_obs_button_2.clicked.connect(self.sim_obs_graphic_vazao)

            #List of layers
            self.dlg.layer_list.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dlg.layer_list.show()

            # a reference to our map canvas 
            self.canvas = iface.mapCanvas() 
            self.flag_map=0
            
            self.pointTool = QgsMapToolEmitPoint(self.canvas)
            self.pointTool.canvasClicked.connect(self.display_feature)

            self.dlg.select_mini_bacia_button.clicked.connect(self.f_select_minibacia)
            self.dlg.select_mini_bacia_button_2.clicked.connect(self.f_select_minibacia_desativar)

            # this QGIS tool emits as QgsPoint after each click on the map canvas
            #if self.flag_map ==1:
                
                #pointTool.canvasClicked.connect(self.display_feature)
                #canvas.setMapTool(pointTool)
            #else:
                #canvas.unsetMapTool(pointTool)
            #self.dlg.select_mini_bacia_button.clicked.connect(self.f_select_minibacia)
            #self.dlg.select_mini_bacia_button_2.clicked.connect(self.f_select_minibacia_desativar)
            
            #

            #canvas.setMapTool(pointTool)
            #layers = [layer for layer in QgsProject.instance().mapLayers().values()]
            #layer_list = []
            #for layer in layers:
            ##    #self.dlg.layer_list.show()
            #    layer_list.append(layer.name())
            #    print(layer_list)
            
            #self.dlg.layer_list.addItems(['teste','teste2'])
            #selectedLayerIndex = self.dlg.layer_list.currentIndex()
            #selectedLayer = layers[selectedLayerIndex]

        # show the dialog
        self.dlg.show()

        self.dlg.exec_()
        # Run the dialog event loop
        #result = self.dlg.exec_()
        # See if OK was pressed
        #if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #pass

    def f_open_shp_str(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="TIFF file (*.tif);;")
        self.dlg.input_descarga_total.setText(fileName[0])          

    def f_project_folder(self):
        fileName = QFileDialog.getExistingDirectory(None, 'Select a Directory')
        self.dlg.project_folder.setText(fileName)

    def f_open_sedpar1(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_sedpar1.setText(fileName[0])  

    def f_open_sedpar2(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_sedpar2.setText(fileName[0])

    def f_add_line_musle_text(self):

        row_count = self.dlg.table_texture_musle.rowCount()
        self.dlg.table_texture_musle.insertRow(int(row_count))
    
    def f_add_line_musle_text2(self):

        row_count = self.dlg.table_factor_musle.rowCount()
        self.dlg.table_factor_musle.insertRow(int(row_count))
    
    def f_remove_line_musle_text(self):

        line_remove = self.dlg.remove_line_indx.toPlainText()
        self.dlg.table_texture_musle.removeRow(int(line_remove))

    def f_remove_line_musle_text2(self):

        line_remove = self.dlg.remove_line_indx_2.toPlainText()
        self.dlg.table_factor_musle.removeRow(int(line_remove))
        
    def f_export_partext(self):

        fileName = QFileDialog.getExistingDirectory(None, 'Select a Directory')
        if fileName:
            row_count = self.dlg.table_texture_musle.rowCount()
            col_count = self.dlg.table_texture_musle.columnCount()

            list_names=['uso', 'Areia %', 'Silte %', 'Argila %', 'orgC %', 'Rocha %']
            df = pd.DataFrame()

            for col in range(0,int(col_count)):
                list_items = []
                for row in range(0,int(row_count)):
                    item = self.dlg.table_texture_musle.item(row, col).text()
                    if col ==0:
                        list_items.append(item)
                    else:
                        list_items.append(float(item))
                df[list_names[col]]=list_items

            mini_txt = df.to_string(
                index=False, formatters = {
                    'uso': '{:<9s}'.format,
                    'Areia %': '{:>8.3f}'.format,
                    'Silte %': '{:>8.3f}'.format,
                    'Argila %':  '{:>8.3f}'.format,
                    'orgC %': '{:>8.3f}'.format,
                    'Rocha %': '{:>8.3f}'.format,
                    }, 
                float_format='{:>8.3f}'.format,justify="left",col_space=0)
            output_file = fileName + '\PARTEXT_MUSLE.txt'
            with open(output_file, 'w') as f:
                f.write(mini_txt)

            bacia_line = 'Bacia 1'
            header_line = '     uso  Areia %  Silte % Argila %   orgC %  Rocha %'

            with open(output_file, 'r') as w:
                new_split = [item.strip() for item in w.readlines()]
            with open(output_file, 'w') as w:
                w.write('%s\n' % bacia_line)
                w.write('%s\n' % header_line)
                for listitem in new_split[1:]:
                    w.write('%s\n' % listitem)

    def f_export_parfactor(self):

        fileName = QFileDialog.getExistingDirectory(None, 'Select a Directory')
        
        if fileName:
            row_count = self.dlg.table_factor_musle.rowCount()
            col_count = self.dlg.table_factor_musle.columnCount()

            list_names=['uso', 'K', 'C', 'P', 'Fgros', 'Ksdr']
            df = pd.DataFrame()

            for col in range(0,int(col_count)):
                list_items = []
                for row in range(0,int(row_count)):
                    item = self.dlg.table_factor_musle.item(row, col).text()
                    if col ==0:
                        list_items.append(item)
                    else:
                        list_items.append(float(item))
                df[list_names[col]]=list_items

            mini_txt = df.to_string(
                index=False, formatters = {
                    'uso': '{:<9s}'.format,
                    'K': '{:>8.3f}'.format,
                    'C': '{:>8.3f}'.format,
                    'P':  '{:>8.3f}'.format,
                    'Fgros': '{:>8.3f}'.format,
                    'Ksdr': '{:>8.3f}'.format,
                    }, 
                float_format='{:>8.3f}'.format,justify="left",col_space=0)
            output_file = fileName + '\PARTEXT_MUSLE.txt'
            with open(output_file, 'w') as f:
                f.write(mini_txt)

            bacia_line = 'Bacia 1'
            header_line = '     uso  Areia %  Silte % Argila %   orgC %  Rocha %'

            with open(output_file, 'r') as w:
                new_split = [item.strip() for item in w.readlines()]
            with open(output_file, 'w') as w:
                w.write('%s\n' % bacia_line)
                w.write('%s\n' % header_line)
                for listitem in new_split[1:]:
                    w.write('%s\n' % listitem)

    def f_load_partext(self):
        
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        if len(fileName[0]) != 0:
            df = pd.read_csv(fileName[0], delim_whitespace=True,
                    header=None,skiprows=2,names=[0,1,2,3,4,5])
        
            last_line = df[df[0] == 'Bacia'].index[0]
            df = df[:last_line]

            for col in range(0,len(df.keys().values)):
                for row in range(0, len(df[col])):
                    self.dlg.table_texture_musle.setItem(row, col, QTableWidgetItem(str(df[col][row])))
            
            self.dlg.table_texture_musle.setRowCount(len(df[col]))

    def f_load_parfactor(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        if len(fileName[0]) != 0:
            df = pd.read_csv(fileName[0], delim_whitespace=True,
                    header=None,skiprows=2,names=[0,1,2,3,4,5])

            last_line = df[df[0] == 'Bacia'].index[0]
            df = df[:last_line]  
                     
            for col in range(0,len(df.keys().values)):
                for row in range(0, len(df[col])):
                    self.dlg.table_factor_musle.setItem(row, col, QTableWidgetItem(str(df[col][row])))

            self.dlg.table_factor_musle.setRowCount(len(df[col]))


    def f_open_hru_file(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file and HRC fie (*.txt *.hrc);;")
        self.dlg.input_musle_hru.setText(fileName[0])
        
        if len(fileName[0]) != 0:
            df = pd.read_csv(fileName[0],
                    encoding = 'unicode_escape', engine ='python',
                    delim_whitespace=False, names=['HRU'])
            
            list_hru =[]
            row_count = self.dlg.table_texture_musle.rowCount()
            
            
            for name in df['HRU']:
                new_name = name.split(' ')[0]
                list_hru.append(new_name)
            
            self.dlg.table_texture_musle.setRowCount(len(list_hru))
            self.dlg.table_factor_musle.setRowCount(len(list_hru))
            
            k =0
            for name in list_hru:
                self.dlg.table_texture_musle.setItem(k, 0, QTableWidgetItem(str(name)))
                self.dlg.table_factor_musle.setItem(k, 0, QTableWidgetItem(str(name)))
                k=k+1
    




    def f_select_minibacia(self):
        
        #self.flag_map =1
        #canvas = iface.mapCanvas() 
        #pointTool = QgsMapToolEmitPoint(canvas)
        
        self.canvas.setMapTool(self.pointTool)
    
    def f_select_minibacia_desativar(self):
        #self.flag_map=0
        #canvas = iface.mapCanvas() 
        #pointTool = QgsMapToolEmitPoint(canvas)
        self.canvas.unsetMapTool(self.pointTool)


    def display_feature(self,point):

        layer = self.dlg.layer_list.currentLayer()
        feats = [ feat for feat in layer.getFeatures() ]
        fields = []
        geo_pt = QgsGeometry.fromPointXY(QgsPointXY(point.x(), point.y()))
        id = -1

        for feat in feats:
            if geo_pt.within(feat.geometry()):
                id = feat.id()
                break

        for field in layer.fields():
            fields.append(field.name())

        if 'ID_Mini' in fields:
            self.dlg.mini_bacia_text.setText(str(feats[id].attribute('ID_Mini')))
            iface.messageBar().pushMessage("Success", "Selected ID_Mini: "+str(feats[id].attribute('ID_Mini')), level=Qgis.Success, duration=1)
        else:
            iface.messageBar().pushMessage("Error", "Cathments not have 'ID_Mini attribute", level=Qgis.Critical, duration=3)
        
        if id == -1:
            iface.messageBar().pushMessage("Error", "Feature not selected", level=Qgis.Critical, duration=3)

        #iface.mainWindow().show()
        
    def descarga_solida_total(self):
        
        filename = self.dlg.input_descarga_total.toPlainText()
        layer = QgsRasterLayer(filename)
        entries = []
        ras = QgsRasterCalculatorEntry()
        ras.ref='str@1'
        ras.raster = layer
        ras.bandNumber=1
        entries.append(ras)

        # table descarga
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'
        
        df_silte = pd.read_csv(folder_output+'\\CONC_RIO_silte.txt', delim_whitespace=True)

        df_areia = pd.read_csv(folder_output+'\\CONC_RIO_areia.txt', delim_whitespace=True)
        
        df_argila = pd.read_csv(folder_output+'\\CONC_RIO_argila.txt', delim_whitespace=True)


        output = self.dlg.project_folder.toPlainText() + '\\descarga_total.tif'
        print(output)
        provider = layer.dataProvider()
        extent = layer.extent()
        stats = provider.bandStatistics(1, QgsRasterBandStats.All) 
        max_pixel_value = stats.maximumValue

        provider = layer.dataProvider()

        extent = provider.extent()
        expression = ' '
        
        for  value in range(1,int(max_pixel_value)+1):

            df_descarga = df_areia[str(value)] + df_silte[str(value)] + df_argila[str(value)]
            descarga_value = df_descarga.mean()

            expression +=  '(str@1 ={value}) *{descarga}'.format(value=value,descarga=float(descarga_value))
            if value != max_pixel_value:
                expression +=' +'
            else:
                pass

        calc = QgsRasterCalculator(expression,\
                output, 'GTiff', layer.extent(), layer.width(), layer.height(),entries)
        calc.processCalculation()

        



    def list_of_layers(self):
        layers = self.iface.legendInterface().layers()
        layer_list = []
        for layer in layers:
            self.dlg.layer_list.clear()
            self.dlg.layer_list.show()
            layer_list.append(layer.name())
        
        self.dlg.layer_list.addItems(layer_list)
        selectedLayerIndex = self.dlg.layer_list.currentIndex()
        selectedLayer = layers[selectedLayerIndex]
    
    def open_obs_data(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_obs.setText(fileName[0])

    def open_obs_data_vazao(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_obs_2.setText(fileName[0])

    def sim_obs_graphic(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()

        obs_file = self.dlg.input_obs.toPlainText()

        df = pd.read_csv(obs_file, delim_whitespace=True,names=['DIA','MES','ANO','SED'],na_values='-1')

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)

        df['date'] = list_date
        # Simulado

        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'
        
        df_silte = pd.read_csv(folder_output+'\\CONC_RIO_silte.txt', delim_whitespace=True)
        
        df_argila = pd.read_csv(folder_output+'\\CONC_RIO_argila.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df_silte['ANO'])):
            date = datetime.datetime(df_silte['ANO'][n],df_silte['MES'][n],df_silte['DIA'][n])
            list_date.append(date)

        sum_sediments = df_argila[str(mini_bacia_num)]+df_silte[str(mini_bacia_num)]
        df_result = pd.DataFrame()
        df_result['date'] = list_date
        df_result[str(mini_bacia_num)] = sum_sediments

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df_result['date'],df_result[str(mini_bacia_num)],color='#003566', lw=0.5, label='Simulado')
        plt.plot(df[df['date']>=df_result['date'][0]]['date'],df[df['date']>=df_result['date'][0]]['SED'],color='k', marker = 'o',ms = 5, lw=0.0, label='Observado')
        plt.title("Minibacia "+ str(mini_bacia_num))
        plt.ylabel('Sediments (mg/L)')
        plt.xlabel('date')
        plt.grid()

        plt.legend()


    def sim_obs_graphic_vazao(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()

        obs_file = self.dlg.input_obs_2.toPlainText()

        df = pd.read_csv(obs_file, delim_whitespace=True,names=['DIA','MES','ANO','Discharge'],na_values='-1')

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)

        df['date'] = list_date
        # Simulado

        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'
        

        df_vazao = pd.read_csv(folder_output+'\\VAZAO_MINI.HIG', delim_whitespace=True)
        df_data = pd.read_csv(folder_output+'\\SED_MINI_silte.txt', delim_whitespace=True)
        list_date = []

        for n in range(0,len(df_data['ANO'])):
            date = datetime.datetime(df_data['ANO'][n],df_data['MES'][n],df_data['DIA'][n])
            list_date.append(date)
            
        df_data['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df_data['date'],df_vazao[str(mini_bacia_num)],color='#003566', lw=0.5, label='Simulado')
        plt.plot(df[df['date']>=df_data['date'][0]]['date'],df[df['date']>=df_data['date'][0]]['Discharge'],color='k', marker = 'o',ms = 3, lw=0.0, label='Observado')
        plt.title("Cathment "+ str(mini_bacia_num))
        plt.ylabel('Discharge (m3s-1)')
        plt.xlabel('date')
        plt.grid()

        plt.legend()       


    def graphic_conc_rio_areia(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'
        
        df = pd.read_csv(folder_output+'\\CONC_RIO_areia.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)
            
        df['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df['date'],df[str(mini_bacia_num)],color='#fca311', lw=0.5)
        
        plt.title("Cathment "+ str(mini_bacia_num))
        plt.ylabel('Sand concentration (mg/L)')
        plt.xlabel('date')
        plt.grid()
        plt.ion()

    def graphic_conc_rio_silte(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'

        df = pd.read_csv(folder_output+'\\CONC_RIO_silte.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)
            
        df['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df['date'],df[str(mini_bacia_num)],color='#264653', lw=0.5)
        
        plt.title("Cathment "+ str(mini_bacia_num))
        plt.ylabel('Silt concentration (mg/L)')
        plt.xlabel('date')
        plt.grid()
        plt.ion()

    def graphic_conc_rio_argila(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'

        df = pd.read_csv(folder_output+'\\CONC_RIO_argila.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)
            
        df['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df['date'],df[str(mini_bacia_num)],color='#343a40', lw=0.5)
        
        plt.title("Minibacia "+ str(mini_bacia_num))
        plt.ylabel('Clay concentration (mg/L)')
        plt.xlabel('date')
        plt.grid()
        plt.ion()

    def graphic_conc_finos(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'

        df_silte = pd.read_csv(folder_output+'\\CONC_RIO_silte.txt', delim_whitespace=True)
        
        df_argila = pd.read_csv(folder_output+'\\CONC_RIO_argila.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df_silte['ANO'])):
            date = datetime.datetime(df_silte['ANO'][n],df_silte['MES'][n],df_silte['DIA'][n])
            list_date.append(date)

        sum_sediments = df_argila[str(mini_bacia_num)]+df_silte[str(mini_bacia_num)]
        df_result = pd.DataFrame()
        df_result['date'] = list_date
        df_result[str(mini_bacia_num)] = sum_sediments

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df_result['date'],df_result[str(mini_bacia_num)],color='#343a40', lw=0.5)
        
        plt.title("Catchment "+ str(mini_bacia_num))
        plt.ylabel('CSS (mg/L)')
        plt.xlabel('date')
        plt.grid()
        plt.ion()  


    def graphic_sed_argila(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'

        df = pd.read_csv(folder_output+'\\SED_MINI_argila.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)
            
        df['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df['date'],df[str(mini_bacia_num)],color='#343a40', lw=0.5)
        
        plt.title("Cathment "+ str(mini_bacia_num))
        plt.ylabel('Clay sediments')
        plt.xlabel('date')
        plt.grid()
        plt.ion()

    def graphic_sed_areia(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'

        df = pd.read_csv(folder_output+'\\SED_MINI_areia.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)
            
        df['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df['date'],df[str(mini_bacia_num)],color='#fca311', lw=0.5)
        
        plt.title("Cathment "+ str(mini_bacia_num))
        plt.ylabel('Sand sediments')
        plt.xlabel('date')
        plt.grid()
        plt.ion()

    def graphic_sed_silte(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'

        df = pd.read_csv(folder_output+'\\SED_MINI_silte.txt', delim_whitespace=True)

        list_date = []

        for n in range(0,len(df['ANO'])):
            date = datetime.datetime(df['ANO'][n],df['MES'][n],df['DIA'][n])
            list_date.append(date)
            
        df['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df['date'],df[str(mini_bacia_num)],color='#264653', lw=0.5)
        
        plt.title("Cathment "+ str(mini_bacia_num))
        plt.ylabel('Silte sediments')
        plt.xlabel('date')
        plt.grid()
        plt.ion()

    def graphic_vazao(self):

        mini_bacia_num = self.dlg.mini_bacia_text.toPlainText()
        default_folder = os.getcwd()
   
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_output = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed\\output'

        df = pd.read_csv(folder_output+'\\VAZAO_MINI.HIG', delim_whitespace=True)
        df_data = pd.read_csv(folder_output+'\\SED_MINI_silte.txt', delim_whitespace=True)
        list_date = []

        for n in range(0,len(df_data['ANO'])):
            date = datetime.datetime(df_data['ANO'][n],df_data['MES'][n],df_data['DIA'][n])
            list_date.append(date)
            
        df_data['date'] = list_date

        matplotlib.use('Qt5Agg')
        fig, ax = plt.subplots()

        plt.plot(df_data['date'],df[str(mini_bacia_num)],color='#343a40', lw=0.5)
        
        plt.title("Cathment "+ str(mini_bacia_num))
        plt.ylabel('Discharge (m3 s-1)')
        plt.xlabel('date')
        plt.grid()
        plt.ion()     

    def run_task_presed(self):
        globals()['task1'] = Step1('Running PRESED.', 10,
        self.dlg.input_presed1.toPlainText(),
        self.dlg.input_presed2.toPlainText(),
        self.dlg.input_presed3.toPlainText(),
        self.dlg.input_presed4.toPlainText(),
        self.dlg.input_presed5.toPlainText(),
        self.dlg.input_presed6.toPlainText(),
        self.dlg.input_presed7.toPlainText(),
        self.dlg.project_folder.toPlainText(),
        self.dlg.progressbar,
        self.dlg
        )

        #print('task step 2 status: ')
        QgsApplication.taskManager().addTask(globals()['task1'])
        #print('task step 3 status: ',)


    
    def run_task_mgb_sed(self):

        print("task 2")
        globals()['task2'] = Step2('Running MGB SED.', 10,
        self.dlg.input_sed_geom1.toPlainText(),
        #self.dlg.input_sed_geom2.toPlainText(),
        self.dlg.input_sed_hydro.toPlainText(),
        self.dlg.input_sed_cli1.toPlainText(),
        self.dlg.input_sed_cli2.toPlainText(),
        self.dlg.input_sed_par1.toPlainText(),
        self.dlg.input_sed_par2.toPlainText(),
        self.dlg.input_sed_par3.toPlainText(),
        self.dlg.input_sed_sed1.toPlainText(),
        self.dlg.input_sed_sed2.toPlainText(),
        self.dlg.input_sed_sed3.toPlainText(),
        self.dlg.input_sedpar1.toPlainText(),
        self.dlg.input_sedpar2.toPlainText(),
        self.dlg.project_folder.toPlainText(),
        self.dlg.progressbar_2,
        self.dlg
        )

        print('task step 2 status: ')
        QgsApplication.taskManager().addTask(globals()['task2'])
        print('task step 4 status: ',)

    def f_open_presed1(self):

        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file, ASC file(*.txt *.asc);;")
        self.dlg.input_presed1.setText(fileName[0])
        
    def f_open_presed2(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file, ASC file(*.txt *.asc);;")
        self.dlg.input_presed2.setText(fileName[0])

    def f_open_presed3(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file, ASC file(*.txt *.asc);;")
        self.dlg.input_presed3.setText(fileName[0])

    def f_open_presed4(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file, ASC file(*.txt *.asc);;")
        self.dlg.input_presed4.setText(fileName[0])   

    def f_open_presed5(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file, ASC file(*.txt *.asc);;")
        self.dlg.input_presed5.setText(fileName[0])
    
    def f_open_presed6(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_presed6.setText(fileName[0])
        
    def f_open_presed7(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_presed7.setText(fileName[0])


    def f_open_geom1(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="GTP file (*.gtp);;")
        self.dlg.input_sed_geom1.setText(fileName[0]) 

    #def f_open_geom2(self):
    #    fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Hydrological file (*.hig);;")
    #    self.dlg.input_sed_geom2.setText(fileName[0])

    def f_open_hydro(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="QOB file (*.qob);;")
        self.dlg.input_sed_hydro.setText(fileName[0])

    def f_open_cli1(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="CLI file (*.cli);;")
        self.dlg.input_sed_cli1.setText(fileName[0])    

    def f_open_cli2(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Hydrological file, PBI file (*.hig *.PBI);;")
        self.dlg.input_sed_cli2.setText(fileName[0])

    def f_open_par1(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Hydrological file, Fix file (*.hig *.fix);")
        self.dlg.input_sed_par1.setText(fileName[0]) 

    def f_open_par2(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Hydrological file, CAL  file (*.hig *.cal);;")
        self.dlg.input_sed_par2.setText(fileName[0])


    def f_open_par3(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Hydrological file, Simulation file (*.hig *sim);;")
        self.dlg.input_sed_par3.setText(fileName[0])  

    def f_open_sed1(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_sed_sed1.setText(fileName[0]) 

    def f_open_sed2(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_sed_sed2.setText(fileName[0]) 

    def f_open_sed3(self):
        fileName = QFileDialog.getOpenFileName(None, 'OpenFile','',filter="Text file (*.txt);;")
        self.dlg.input_sed_sed3.setText(fileName[0]) 


MESSAGE_CATEGORY = 'PRESED task'



class Step1(QgsTask):
    """This shows how to subclass QgsTask"""

    def __init__(self, description, duration,bloco, dir, mini, mnt, rede, par_text, par_factor, output_project, progressbar, dlg_widgets):

        super().__init__(description, QgsTask.CanCancel)
        self.duration = duration
        self.total = 0
        self.iterations = 0
        self.exception = None
        self.bloco_file = bloco
        self.dir_file = dir
        self.mini_file = mini
        self.mnt_file = mnt
        self.rede_file = rede
        self.par_text = par_text
        self.par_factor = par_factor
        self.output_project = output_project
        self.progress_value = 0
        self.progressbar = progressbar
        self.dlg = dlg_widgets
        self.time_start = time.time()
    
    def run(self):
        """Here you implement your heavy lifting. This method should
        periodically test for isCancelled() to gracefully abort.
        This method MUST return True or False
        raising exceptions will crash QGIS so we handle them internally and
        raise them in self.finished
        """

        def progress_count(init,end):
            for n in range(init,end+1,1):
                self.setProgress(n)
                self.progressbar.setValue(n)
                sleep(0.02)

            self.progress_value = end

            return

        def convert_to_txt(file,folder_input,output_name):
            with open(file) as f:
                struct = f.read()
            output = folder_input +output_name
            with open(output, 'w') as f:
                f.write(struct)
            return output

        #QgsMessageLog.logMessage('Started task "{}"'.format(
        #    self.description()), MESSAGE_CATEGORY, Qgis.Info)
        #wait_time = self.duration / 100

        # Creating path

        default_folder = os.getcwd()
        
        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_plugin = folder_plugins+'python\\plugins\\mgb_sed'
        directory_input = os.path.join(folder_plugin, 'input\\')
        
        os.chdir(folder_plugin)

        directory_output = os.path.join(folder_plugin, 'output\\')
        progress_count(self.progress_value, 10)

        if not os.path.exists(directory_input):
            os.makedirs(directory_input)

        if not os.path.exists(directory_output):
            os.makedirs(directory_output)

        progress_count(self.progress_value, 50)
        #change to txt files 
        bloco_txt = convert_to_txt(self.bloco_file, directory_input,'\\BLOCO.txt')
        print(bloco_txt)
        dir_txt = convert_to_txt(self.dir_file, directory_input,'\\DIR.txt')
        mini_txt = convert_to_txt(self.mini_file, directory_input,'\\MINI.txt')
        mnt_txt = convert_to_txt(self.mnt_file, directory_input,'\\MNT.txt')
        rede_txt = convert_to_txt(self.rede_file, directory_input,'\\REDE.txt')
        par_text_file = convert_to_txt(self.par_text,directory_input,'\\PARTEXT_MUSLE.txt')
        par_factor_file = convert_to_txt(self.par_factor,directory_input,'\\PARUSO_MUSLE.txt')

        progress_count(self.progress_value, 100)

        subprocess.call(folder_plugin+"\\PRE_SED.exe")

        output_project_folder = os.path.join(self.output_project, 'presed_output\\')

        if not os.path.exists(output_project_folder):
            os.makedirs(output_project_folder)

        area_acum_file =convert_to_txt(directory_output+"\\AREA_ACU.txt",output_project_folder,"\\AREA_ACU.txt")
        sed_hru_file = convert_to_txt(directory_output+"\\SED_HRU.txt",output_project_folder,"\\SED_HRU.txt")
        sed_lsm = convert_to_txt(directory_output+"\\SED_LSm.txt",output_project_folder,"\\SED_LSm.txt")
        sed_sdr = convert_to_txt(directory_output+"\\SED_SDR.txt",output_project_folder,"\\SED_SDR.txt")

        os.chdir(default_folder)
 
        #progress_count(self.progress_value, 100)

        # check isCanceled() to handle cancellation
        if self.isCanceled():
            return False

        return True

    def finished(self, result):
        """This method is automatically called when self.run returns.
        result is the return value from self.run.
        This function is automatically called when the task has completed (
        successfully or otherwise). You just implement finished() to do
        whatever
        follow up stuff should happen after the task is complete. finished is
        always called from the main thread, so it's safe to do GUI
        operations and raise Python exceptions here.
        """
        if result:

            #self.dlg.input_sed_sed1.setText(self.result_bho_areas)
            #self.dlg.input_sed_sed1.setText(self.result_bho_areas)
            #self.dlg.input_sed_sed1.setText(self.result_bho_areas)

            #QgsMessageLog.logMessage(
            #    'Task "{name}" completed\n' \
            #    'Time duration: {total} seconds.'.format(
            #        name=self.description(),
            #        total= "{:.2f}".format(time.time()-self.time_start),
            #        ),
            #    MESSAGE_CATEGORY, Qgis.Success)
            iface.messageBar().pushMessage("Done", 'PRESED', level=Qgis.Success, duration=1)

        else:
            if self.exception is None:
                #QgsMessageLog.logMessage(
                #    'Task "{name}" not successful but without exception ' \
                #    '(probably the task was manually canceled by the '
                #    'user)'.format(
                #        name=self.description()),
                #    MESSAGE_CATEGORY, Qgis.Warning)
                iface.messageBar().pushMessage("Error", 'Not successful but without exception.', level=Qgis.Warning, duration=1)
            else:
                #QgsMessageLog.logMessage(
                    #'Task "{name}" Exception: {exception}'.format(
                    #   name=self.description(), exception=self.exception),
                    #MESSAGE_CATEGORY, Qgis.Critical)
                iface.messageBar().pushMessage('Task "{name}" Exception: {exception}'.format(
                        name=self.description(), exception=self.exception), level=Qgis.Warning, duration=1)
                raise self.exception

    def cancel(self):
        #QgsMessageLog.logMessage(
        #    'Task "{name}" was cancelled'.format(name=self.description()),
        #    MESSAGE_CATEGORY, Qgis.Info)
        iface.messageBar().pushMessage("Cancelled", 'Stop operation.', level=Qgis.Info, duration=1)
        super().cancel()


class Step2(QgsTask):
    """This shows how to subclass QgsTask"""

    def __init__(self, description, duration,minigtp, discharge, climate_average, chuva, veg,soil, par_hig, 
                    sed_hru, sed_lsm, sed_sdr, sedpar_text, sedpar_factor, output_project, progressbar, dlg_widgets):

        super().__init__(description, QgsTask.CanCancel)
        self.duration = duration
        self.total = 0
        self.iterations = 0
        self.exception = None
        self.mini_file = minigtp #TODO: minigtp is equal cell_file.
        #self.cell_file = cell
        self.discharge_file = discharge #QOBS
        self.climate_average_file = climate_average  #MediasCli
        self.chuva_file = chuva #CHUVA BIN
        self.veg_file = veg  # PARFACT
        self.soil_file = soil #PARUSO
        self.par_hig_file = par_hig #infoMGB
        self.sed_hru_file = sed_hru 
        self.sed_lsm_file = sed_lsm
        self.sed_sdr_file = sed_sdr
        self.sedpar_text_file = sedpar_text
        self.sedpar_factor_file = sedpar_factor
        self.output_project = output_project
        self.progress_value = 0
        self.progressbar = progressbar
        self.dlg = dlg_widgets
        self.time_start = time.time()
    
    def run(self):
        """Here you implement your heavy lifting. This method should
        periodically test for isCancelled() to gracefully abort.
        This method MUST return True or False
        raising exceptions will crash QGIS so we handle them internally and
        raise them in self.finished
        """

        def progress_count(init,end):
            for n in range(init,end+1,1):
                self.setProgress(n)
                self.progressbar.setValue(n)
                sleep(0.02)

            self.progress_value = end

            return

        def save_to_input_folder(file,folder_input,output_name):

            output = folder_input +output_name

            try:
                with open(file) as f:
                    struct = f.read()
 
                with open(output, 'w') as f:
                    f.write(struct)
    
            except:
                save = shutil.copyfile(file, output)  


            return output
        



        QgsMessageLog.logMessage('Started task "{}"'.format(
            self.description()), MESSAGE_CATEGORY, Qgis.Info)
        #wait_time = self.duration / 100

        # Creating path

        default_folder = os.getcwd()

        folder_plugins = QgsApplication.qgisSettingsDirPath()
        folder_plugin = folder_plugins+'python\\plugins\\mgb_sed\\mgb_sed'
        directory_input = os.path.join(folder_plugin, 'input\\')
    
        os.chdir(folder_plugin)

        directory_output = os.path.join(folder_plugin, 'output\\')

        progress_count(self.progress_value, 10)

        if not os.path.exists(directory_input):
            os.makedirs(directory_input)

        if not os.path.exists(directory_output):
            os.makedirs(directory_output)

        progress_count(self.progress_value, 50)
        #change to txt files

        mini_gtp = save_to_input_folder(self.mini_file, directory_input,'\\Cell.hig') #\MINI.gtp
    
        #cell_file = save_to_input_folder(self.cell_file, directory_input,'\\Cell.hig')
        qobs_file = save_to_input_folder(self.discharge_file, directory_input,'\\QOBS.qob')
        climate_average_file = save_to_input_folder(self.climate_average_file,directory_input,'\\medias.cli')

        chuva_file = save_to_input_folder(self.chuva_file, directory_input,'\\CHUVABIN.hig')
        veg_file = save_to_input_folder(self.veg_file, directory_input,'\\ALBIAF.hig')
        soil_file = save_to_input_folder(self.soil_file, directory_input,'\\PARUSO.hig')
        par_hig_file = save_to_input_folder(self.par_hig_file, directory_input,'\\PARHIG.hig')
        sed_hru_file = save_to_input_folder(self.sed_hru_file, directory_input,'\\SED_HRU.txt')
        sed_lsm_file = save_to_input_folder(self.sed_lsm_file, directory_input,'\\SED_LSm.txt')
        sed_sdr_file = save_to_input_folder(self.sed_sdr_file, directory_input,'\\SED_SDR.txt')
        sedpar_text_file = save_to_input_folder(self.sedpar_text_file, directory_input,'\\PARTEXT_MUSLE.txt')
        sedpar_factor_file = save_to_input_folder(self.sedpar_factor_file, directory_input,'\\PARUSO_MUSLE.txt')

        progress_count(self.progress_value, 100)

        subprocess.call(folder_plugin+"\\MGB_HD_sed.exe")

        output_project_folder = os.path.join(self.output_project, 'mgbsed_output\\')

        if not os.path.exists(output_project_folder):
            os.makedirs(output_project_folder)
        
        
        list_files = os.listdir(directory_output)

        for file in list_files:
            area_acum_file =save_to_input_folder(directory_output+"\\"+file,output_project_folder,"\\"+file)
        '''
        area_acum_file =save_to_input_folder(directory_output+"\\CONC_RIO_areia.txt",output_project_folder,"\\CONC_RIO_areia.txt")
        area_acum_file =save_to_input_folder(directory_output+"\\CONC_RIO_argila.txt",output_project_folder,"\\CONC_RIO_argila.txt")
        area_acum_file =save_to_input_folder(directory_output+"\\CONC_RIO_silte.txt",output_project_folder,"\\CONC_RIO_silte.txt")
        area_acum_file =save_to_input_folder(directory_output+"\\CONC_SUB_areia.txt",output_project_folder,"\\CONC_SUB_areia.txt")
        area_acum_file =save_to_input_folder(directory_output+"\\CONC_SUB_argila.txt",output_project_folder,"\\CONC_SUB_argila.txt")
        area_acum_file =save_to_input_folder(directory_output+"\\CONC_SUB_silte.txt",output_project_folder,"\\CONC_SUB_silte.txt")
        area_acum_file =save_to_input_folder(directory_output+"\\NOSOLO.HIG",output_project_folder,"\\NOSOLO.HIG")
        '''
        
        os.chdir(default_folder)
 
        #progress_count(self.progress_value, 100)

        # check isCanceled() to handle cancellation
        if self.isCanceled():
            return False

        return True

    def finished(self, result):
        """This method is automatically called when self.run returns.
        result is the return value from self.run.
        This function is automatically called when the task has completed (
        successfully or otherwise). You just implement finished() to do
        whatever
        follow up stuff should happen after the task is complete. finished is
        always called from the main thread, so it's safe to do GUI
        operations and raise Python exceptions here.
        """
        if result:


            QgsMessageLog.logMessage(
                'Task "{name}" completed\n' \
                'Time duration: {total} seconds.'.format(
                    name=self.description(),
                    total= "{:.2f}".format(time.time()-self.time_start),
                    ),
                MESSAGE_CATEGORY, Qgis.Success)
        else:
            if self.exception is None:
                QgsMessageLog.logMessage(
                    'Task "{name}" not successful but without exception ' \
                    '(probably the task was manually canceled by the '
                    'user)'.format(
                        name=self.description()),
                    MESSAGE_CATEGORY, Qgis.Warning)
            else:
                QgsMessageLog.logMessage(
                    'Task "{name}" Exception: {exception}'.format(
                        name=self.description(), exception=self.exception),
                    MESSAGE_CATEGORY, Qgis.Critical)
                raise self.exception

    def cancel(self):
        QgsMessageLog.logMessage(
            'Task "{name}" was cancelled'.format(name=self.description()),
            MESSAGE_CATEGORY, Qgis.Info)
        super().cancel()

